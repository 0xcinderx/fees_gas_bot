import asyncio
import logging
import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv
import threading
from keep_alive import keep_alive

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BlockchainFeesBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        self.application = Application.builder().token(self.bot_token).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–ª–±—ç–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [
                InlineKeyboardButton("üü£ TON", callback_data="ton"),
                InlineKeyboardButton("üü† Bitcoin", callback_data="bitcoin")
            ],
            [
                InlineKeyboardButton("üîµ Ethereum", callback_data="ethereum"),
                InlineKeyboardButton("üü° BSC", callback_data="bsc")
            ],
            [
                InlineKeyboardButton("üü¢ Solana", callback_data="solana"),
                InlineKeyboardButton("üî¥ Tron", callback_data="tron")
            ],
            [
                InlineKeyboardButton("üü™ Polygon", callback_data="polygon"),
                InlineKeyboardButton("üî∑ Arbitrum", callback_data="arbitrum")
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = (
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–∏—Å—Å–∏–π –±–ª–æ–∫—á–µ–π–Ω–æ–≤!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫—á–µ–π–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–∏—Å—Å–∏–π:"
        )

        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        blockchain = query.data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ç–∏
        if blockchain.endswith("_network_load"):
            original_blockchain = blockchain.replace("_network_load", "")
            try:
                network_info = await self.get_network_load(original_blockchain)
                await query.edit_message_text(text=network_info, reply_markup=self.get_back_keyboard(original_blockchain))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è {original_blockchain}: {e}")
                await query.edit_message_text(
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è {original_blockchain.upper()}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            try:
                fees_info = await self.get_blockchain_fees(blockchain)
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
                keyboard = [[InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∏", callback_data=f"{blockchain}_network_load")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text=fees_info, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {blockchain}: {e}")
                await query.edit_message_text(
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {blockchain.upper()}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

    def get_back_keyboard(self, blockchain: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö"""
        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –∫–æ–º–∏—Å—Å–∏—è–º", callback_data=blockchain)]]
        return InlineKeyboardMarkup(keyboard)

    def create_progress_bar(self, percentage: float, length: int = 10) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        filled = int(percentage / 100 * length)
        empty = length - filled
        return "‚ñà" * filled + "‚ñë" * empty

    def get_load_emoji(self, percentage: float) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ emoji –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏"""
        if percentage >= 80:
            return "üî¥"  # –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        elif percentage >= 50:
            return "üü°"  # –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞
        else:
            return "üü¢"  # –ù–∏–∑–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞

    async def get_network_load(self, blockchain: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ç–∏"""
        try:
            if blockchain == "ethereum":
                return await self.get_ethereum_load()
            elif blockchain == "bsc":
                return await self.get_bsc_load()
            elif blockchain == "bitcoin":
                return await self.get_bitcoin_load()
            elif blockchain == "solana":
                return await self.get_solana_load()
            elif blockchain == "ton":
                return await self.get_ton_load()
            elif blockchain == "tron":
                return await self.get_tron_load()
            elif blockchain == "polygon":
                return await self.get_polygon_load()
            elif blockchain == "arbitrum":
                return await self.get_arbitrum_load()
            else:
                return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è {blockchain}: {e}")
            raise

    async def get_ethereum_load(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏ Ethereum"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–µ –∏ –±–ª–æ–∫–∞—Ö
            response = requests.get(
                "https://api.etherscan.io/api?module=gastracker&action=gasoracle",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('status') == '1':
                    gas_price = float(data['result']['ProposeGasPrice'])
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –≥–∞–∑–∞
                    if gas_price >= 50:
                        load_percentage = 85
                    elif gas_price >= 30:
                        load_percentage = 65
                    elif gas_price >= 15:
                        load_percentage = 45
                    else:
                        load_percentage = 25
                    
                    emoji = self.get_load_emoji(load_percentage)
                    progress_bar = self.create_progress_bar(load_percentage)
                    
                    return (
                        f"üîµ **Ethereum Network Load**\n\n"
                        f"{emoji} –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: |{progress_bar}| {load_percentage}%\n\n"
                        f"‚õΩ –¢–µ–∫—É—â–∏–π –≥–∞–∑: {gas_price} Gwei\n"
                        f"üìä TPS: ~15 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫\n"
                        f"‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–∞: ~12 —Å–µ–∫—É–Ω–¥\n"
                        f"üèóÔ∏è –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: ~15M gas\n\n"
                        f"üí° –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ü–µ–Ω–µ –≥–∞–∑–∞"
                    )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API Ethereum load: {e}")
        
        # Fallback –¥–∞–Ω–Ω—ã–µ
        return (
            f"üîµ **Ethereum Network Load**\n\n"
            f"üü° –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: |‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë| 70%\n\n"
            f"üìä TPS: ~15 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–∞: ~12 —Å–µ–∫—É–Ω–¥\n"
            f"üèóÔ∏è –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: ~15M gas\n\n"
            f"üîÑ –î–∞–Ω–Ω—ã–µ API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        )

    async def get_solana_load(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏ Solana"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å TPS Solana
            response = requests.get(
                "https://api.mainnet-beta.solana.com",
                json={
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "getRecentPerformanceSamples",
                    "params": [1]
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if 'result' in data and len(data['result']) > 0:
                    sample = data['result'][0]
                    current_tps = sample.get('numTransactions', 0) / sample.get('samplePeriodSecs', 1)
                    max_tps = 65000  # –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º Solana
                    
                    load_percentage = min(100, (current_tps / max_tps) * 100)
                    emoji = self.get_load_emoji(load_percentage)
                    progress_bar = self.create_progress_bar(load_percentage)
                    
                    return (
                        f"üü¢ **Solana Network Load**\n\n"
                        f"{emoji} –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: |{progress_bar}| {load_percentage:.1f}%\n\n"
                        f"üìä –¢–µ–∫—É—â–∏–π TPS: {current_tps:.0f}\n"
                        f"üöÄ –ú–∞–∫—Å–∏–º—É–º TPS: 65,000\n"
                        f"‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–∞: ~400ms\n"
                        f"üî• –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
                        f"üí° –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–æ–≤"
                    )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API Solana load: {e}")
        
        # Fallback –¥–∞–Ω–Ω—ã–µ
        return (
            f"üü¢ **Solana Network Load**\n\n"
            f"üü¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: |‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë| 40%\n\n"
            f"üìä TPS: ~2,000-3,000\n"
            f"üöÄ –ú–∞–∫—Å–∏–º—É–º TPS: 65,000\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–∞: ~400ms\n"
            f"üî• –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
            f"üîÑ –î–∞–Ω–Ω—ã–µ API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        )

    async def get_bitcoin_load(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏ Bitcoin"""
        try:
            response = requests.get(
                "https://mempool.space/api/v1/fees/mempool-blocks",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if len(data) > 0:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–º–ø—É–ª
                    total_size = sum(block.get('blockSize', 0) for block in data[:6])
                    avg_size = total_size / len(data[:6]) if data else 0
                    max_block_size = 1000000  # 1MB
                    
                    load_percentage = min(100, (avg_size / max_block_size) * 100)
                    emoji = self.get_load_emoji(load_percentage)
                    progress_bar = self.create_progress_bar(load_percentage)
                    
                    return (
                        f"üü† **Bitcoin Network Load**\n\n"
                        f"{emoji} –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: |{progress_bar}| {load_percentage:.1f}%\n\n"
                        f"üìä TPS: ~7 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫\n"
                        f"‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–∞: ~10 –º–∏–Ω—É—Ç\n"
                        f"üèóÔ∏è –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: {avg_size/1000:.0f}KB/{max_block_size/1000}KB\n"
                        f"üì¶ –ë–ª–æ–∫–æ–≤ –≤ –º–µ–º–ø—É–ª–µ: {len(data)}\n\n"
                        f"üí° –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä–µ –º–µ–º–ø—É–ª–∞"
                    )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API Bitcoin load: {e}")
        
        # Fallback –¥–∞–Ω–Ω—ã–µ
        return (
            f"üü† **Bitcoin Network Load**\n\n"
            f"üü° –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: |‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë| 60%\n\n"
            f"üìä TPS: ~7 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–∞: ~10 –º–∏–Ω—É—Ç\n"
            f"üèóÔ∏è –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: ~800KB/1MB\n"
            f"üîí –°–∞–º–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ç—å\n\n"
            f"üîÑ –î–∞–Ω–Ω—ã–µ API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        )

    async def get_bsc_load(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏ BSC"""
        try:
            response = requests.get(
                "https://api.bscscan.com/api?module=proxy&action=eth_blockNumber",
                timeout=10
            )
            
            if response.status_code == 200:
                # BSC –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                load_percentage = 45  # –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞
                emoji = self.get_load_emoji(load_percentage)
                progress_bar = self.create_progress_bar(load_percentage)
                
                return (
                    f"üü° **BSC Network Load**\n\n"
                    f"{emoji} –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: |{progress_bar}| {load_percentage}%\n\n"
                    f"üìä TPS: ~100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫\n"
                    f"‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–∞: ~3 —Å–µ–∫—É–Ω–¥—ã\n"
                    f"üèóÔ∏è –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: ~30M gas\n"
                    f"üí∞ –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏\n\n"
                    f"üí° –ë—ã—Å—Ç—Ä—ã–π –∏ –¥–µ—à–µ–≤—ã–π –±–ª–æ–∫—á–µ–π–Ω"
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API BSC load: {e}")
        
        # Fallback –¥–∞–Ω–Ω—ã–µ
        return (
            f"üü° **BSC Network Load**\n\n"
            f"üü° –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: |‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë| 50%\n\n"
            f"üìä TPS: ~100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–∞: ~3 —Å–µ–∫—É–Ω–¥—ã\n"
            f"üèóÔ∏è –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: ~30M gas\n"
            f"üí∞ –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏\n\n"
            f"üîÑ –î–∞–Ω–Ω—ã–µ API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        )

    async def get_polygon_load(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏ Polygon"""
        load_percentage = 35  # –û–±—ã—á–Ω–æ –Ω–∏–∑–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        emoji = self.get_load_emoji(load_percentage)
        progress_bar = self.create_progress_bar(load_percentage)
        
        return (
            f"üü™ **Polygon Network Load**\n\n"
            f"{emoji} –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: |{progress_bar}| {load_percentage}%\n\n"
            f"üìä TPS: ~7,000 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–∞: ~2 —Å–µ–∫—É–Ω–¥—ã\n"
            f"üèóÔ∏è –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞: ~30M gas\n"
            f"‚ö° Layer 2 –¥–ª—è Ethereum\n\n"
            f"üí° –û—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–µ –∏ –¥–µ—à–µ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
        )

    async def get_arbitrum_load(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏ Arbitrum"""
        load_percentage = 30  # –û–±—ã—á–Ω–æ –Ω–∏–∑–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        emoji = self.get_load_emoji(load_percentage)
        progress_bar = self.create_progress_bar(load_percentage)
        
        return (
            f"üî∑ **Arbitrum Network Load**\n\n"
            f"{emoji} –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: |{progress_bar}| {load_percentage}%\n\n"
            f"üìä TPS: ~4,000 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–∞: ~1 —Å–µ–∫—É–Ω–¥–∞\n"
            f"üèóÔ∏è –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–æ–ª–ª–∞–ø—ã\n"
            f"‚ö° Layer 2 –¥–ª—è Ethereum\n\n"
            f"üí° –ë—ã—Å—Ç—Ä—ã–µ –∏ –¥–µ—à–µ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
        )

    async def get_ton_load(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏ TON"""
        load_percentage = 25  # –û–±—ã—á–Ω–æ –Ω–∏–∑–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        emoji = self.get_load_emoji(load_percentage)
        progress_bar = self.create_progress_bar(load_percentage)
        
        return (
            f"üü£ **TON Network Load**\n\n"
            f"{emoji} –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: |{progress_bar}| {load_percentage}%\n\n"
            f"üìä TPS: ~1,000,000 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–∞: ~5 —Å–µ–∫—É–Ω–¥\n"
            f"üîó –®–∞—Ä–¥–∏–Ω–≥ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n"
            f"üöÄ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –±–ª–æ–∫—á–µ–π–Ω\n\n"
            f"üí° –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–æ–≤"
        )

    async def get_tron_load(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏ Tron"""
        load_percentage = 40  # –°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞
        emoji = self.get_load_emoji(load_percentage)
        progress_bar = self.create_progress_bar(load_percentage)
        
        return (
            f"üî¥ **Tron Network Load**\n\n"
            f"{emoji} –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ç–∏: |{progress_bar}| {load_percentage}%\n\n"
            f"üìä TPS: ~2,000 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/—Å–µ–∫\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –±–ª–æ–∫–∞: ~3 —Å–µ–∫—É–Ω–¥—ã\n"
            f"üèóÔ∏è DPoS –∫–æ–Ω—Å–µ–Ω—Å—É—Å\n"
            f"üí∞ –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏\n\n"
            f"üí° –ü–æ–ø—É–ª—è—Ä–µ–Ω –¥–ª—è DeFi –∏ USDT"
        )

    async def get_token_price(self, token_id: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ CoinGecko API"""
        try:
            response = requests.get(
                f"https://api.coingecko.com/api/v3/simple/price?ids={token_id}&vs_currencies=usd",
                timeout=10
            )
            data = response.json()
            return data[token_id]['usd']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {token_id}: {e}")
            return None

    async def get_blockchain_fees(self, blockchain: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞"""
        try:
            if blockchain == "ethereum":
                return await self.get_ethereum_fees()
            elif blockchain == "bsc":
                return await self.get_bsc_fees()
            elif blockchain == "bitcoin":
                return await self.get_bitcoin_fees()
            elif blockchain == "solana":
                return await self.get_solana_fees()
            elif blockchain == "ton":
                return await self.get_ton_fees()
            elif blockchain == "tron":
                return await self.get_tron_fees()
            elif blockchain == "polygon":
                return await self.get_polygon_fees()
            elif blockchain == "arbitrum":
                return await self.get_arbitrum_fees()
            else:
                return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {blockchain}: {e}")
            raise

    async def get_ethereum_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π Ethereum —á–µ—Ä–µ–∑ Etherscan API"""
        try:
            response = requests.get(
                "https://api.etherscan.io/api?module=gastracker&action=gasoracle",
                timeout=10
            )
            data = response.json()

            if data['status'] == '1':
                safe = float(data['result']['SafeGasPrice'])
                standard = float(data['result']['ProposeGasPrice'])
                fast = float(data['result']['FastGasPrice'])

                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É ETH
                eth_price = await self.get_token_price("ethereum")

                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ETH ~21000 gas
                gas_limit = 21000

                if eth_price:
                    safe_usd = (safe * gas_limit * 0.000000001) * eth_price
                    standard_usd = (standard * gas_limit * 0.000000001) * eth_price
                    fast_usd = (fast * gas_limit * 0.000000001) * eth_price

                    return (
                        f"üîµ **Ethereum (ETH)**\n\n"
                        f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: {fast} Gwei (‚âà ${fast_usd:.3f})\n"
                        f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: {standard} Gwei (‚âà ${standard_usd:.3f})\n"
                        f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {safe} Gwei (‚âà ${safe_usd:.3f})\n\n"
                        f"üí° –†–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ (21k gas)\n"
                        f"üìà –ö—É—Ä—Å ETH: ${eth_price:.2f}"
                    )
                else:
                    return (
                        f"üîµ **Ethereum (ETH)**\n\n"
                        f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: {fast} Gwei\n"
                        f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: {standard} Gwei\n"
                        f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {safe} Gwei\n\n"
                        f"üí° 1 Gwei = 0.000000001 ETH"
                    )
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Ethereum"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API Ethereum: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Ethereum"

    async def get_bsc_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π BSC —á–µ—Ä–µ–∑ BscScan API"""
        try:
            response = requests.get(
                "https://api.bscscan.com/api?module=gastracker&action=gasoracle",
                timeout=10
            )
            data = response.json()

            if data['status'] == '1':
                safe = float(data['result']['SafeGasPrice'])
                standard = float(data['result']['ProposeGasPrice'])
                fast = float(data['result']['FastGasPrice'])

                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É BNB
                bnb_price = await self.get_token_price("binancecoin")

                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è BSC ~21000 gas
                gas_limit = 21000

                if bnb_price:
                    safe_usd = (safe * gas_limit * 0.000000001) * bnb_price
                    standard_usd = (standard * gas_limit * 0.000000001) * bnb_price
                    fast_usd = (fast * gas_limit * 0.000000001) * bnb_price

                    return (
                        f"üü° **BSC (BNB)**\n\n"
                        f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: {fast} Gwei (‚âà ${fast_usd:.4f})\n"
                        f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: {standard} Gwei (‚âà ${standard_usd:.4f})\n"
                        f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {safe} Gwei (‚âà ${safe_usd:.4f})\n\n"
                        f"üí° –†–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ (21k gas)\n"
                        f"üìà –ö—É—Ä—Å BNB: ${bnb_price:.2f}"
                    )
                else:
                    return (
                        f"üü° **BSC (BNB)**\n\n"
                        f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: {fast} Gwei\n"
                        f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: {standard} Gwei\n"
                        f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {safe} Gwei\n\n"
                        f"üí° –û–±—ã—á–Ω–æ 5-10 Gwei –¥–ª—è BSC"
                    )
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ BSC"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API BSC: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö BSC"

    async def get_bitcoin_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π Bitcoin —á–µ—Ä–µ–∑ Mempool.space API"""
        try:
            response = requests.get(
                "https://mempool.space/api/v1/fees/recommended",
                timeout=10
            )
            data = response.json()

            fast = data['fastestFee']
            half_hour = data['halfHourFee']
            hour = data['hourFee']

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É BTC
            btc_price = await self.get_token_price("bitcoin")

            # –°—Ä–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Bitcoin ~250 –±–∞–π—Ç
            tx_size = 250

            if btc_price:
                fast_btc = fast * tx_size * 0.00000001
                half_hour_btc = half_hour * tx_size * 0.00000001
                hour_btc = hour * tx_size * 0.00000001

                fast_usd = fast_btc * btc_price
                half_hour_usd = half_hour_btc * btc_price
                hour_usd = hour_btc * btc_price

                return (
                    f"üü† **Bitcoin (BTC)**\n\n"
                    f"‚ö° –ë—ã—Å—Ç—Ä–∞—è (~10 –º–∏–Ω): {fast} sat/vB (‚âà ${fast_usd:.2f})\n"
                    f"üìä –°—Ä–µ–¥–Ω—è—è (~30 –º–∏–Ω): {half_hour} sat/vB (‚âà ${half_hour_usd:.2f})\n"
                    f"üêå –ú–µ–¥–ª–µ–Ω–Ω–∞—è (~60 –º–∏–Ω): {hour} sat/vB (‚âà ${hour_usd:.2f})\n\n"
                    f"üí° –†–∞—Å—á–µ—Ç –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (250 bytes)\n"
                    f"üìà –ö—É—Ä—Å BTC: ${btc_price:,.2f}"
                )
            else:
                return (
                    f"üü† **Bitcoin (BTC)**\n\n"
                    f"‚ö° –ë—ã—Å—Ç—Ä–∞—è (~10 –º–∏–Ω): {fast} sat/vB\n"
                    f"üìä –°—Ä–µ–¥–Ω—è—è (~30 –º–∏–Ω): {half_hour} sat/vB\n"
                    f"üêå –ú–µ–¥–ª–µ–Ω–Ω–∞—è (~60 –º–∏–Ω): {hour} sat/vB\n\n"
                    f"üí° sat/vB = —Å–∞—Ç–æ—à–∏ –∑–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–π—Ç"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API Bitcoin: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Bitcoin"

    async def get_solana_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö Solana"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å SOL
            sol_price = await self.get_token_price("solana")

            fee_sol = 0.000005

            if sol_price:
                fee_usd = fee_sol * sol_price

                return (
                    f"üü¢ **Solana (SOL)**\n\n"
                    f"üí∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: {fee_sol:.6f} SOL (‚âà ${fee_usd:.6f})\n"
                    f"üìà –ö—É—Ä—Å SOL: ${sol_price:.2f}\n\n"
                    f"üí° –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
                )
            else:
                return (
                    f"üü¢ **Solana (SOL)**\n\n"
                    f"üí∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: {fee_sol:.6f} SOL\n\n"
                    f"üí° –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Solana: {e}")
            return (
                f"üü¢ **Solana (SOL)**\n\n"
                f"üí∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: 0.000005 SOL\n\n"
                f"üí° –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
            )

    async def get_ton_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π TON —á–µ—Ä–µ–∑ Tonapi"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É TON
            ton_price = await self.get_token_price("the-open-network")

            fee_low = 0.005
            fee_standard = 0.01
            fee_high = 0.02

            if ton_price:
                fee_low_usd = fee_low * ton_price
                fee_standard_usd = fee_standard * ton_price
                fee_high_usd = fee_high * ton_price

                return (
                    f"üü£ **TON**\n\n"
                    f"üí∞ –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ~{fee_low} TON (‚âà ${fee_low_usd:.4f})\n"
                    f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: ~{fee_standard} TON (‚âà ${fee_standard_usd:.4f})\n"
                    f"‚ö° –°–ª–æ–∂–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ~{fee_high} TON (‚âà ${fee_high_usd:.4f})\n\n"
                    f"üìà –ö—É—Ä—Å TON: ${ton_price:.3f}\n"
                    f"üí° –ö–æ–º–∏—Å—Å–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
                )
            else:
                return (
                    f"üü£ **TON**\n\n"
                    f"üí∞ –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ~0.005 TON\n"
                    f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: ~0.01 TON\n"
                    f"‚ö° –°–ª–æ–∂–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ~0.02 TON\n\n"
                    f"üí° –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ —Å—á–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API TON: {e}")
            return (
                f"üü£ **TON**\n\n"
                f"üí∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: ~0.01 TON\n"
                f"üìä –ö–æ–º–∏—Å—Å–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
                f"üí° –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ —Å—á–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
            )

    async def get_tron_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö Tron"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å TRX
            trx_price = await self.get_token_price("tron")

            bandwidth_fee = 0.001
            energy_fee = 15

            if trx_price:
                bandwidth_usd = bandwidth_fee * trx_price
                energy_usd = energy_fee * trx_price

                return (
                    f"üî¥ **Tron (TRX)**\n\n"
                    f"üì° –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {bandwidth_fee} TRX (‚âà ${bandwidth_usd:.6f})\n"
                    f"‚ö° –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç: ~{energy_fee} TRX (‚âà ${energy_usd:.4f})\n\n"
                    f"üìà –ö—É—Ä—Å TRX: ${trx_price:.4f}\n"
                    f"üí° –û–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –æ—á–µ–Ω—å –¥–µ—à–µ–≤—ã–µ"
                )
            else:
                return (
                    f"üî¥ **Tron (TRX)**\n\n"
                    f"üì° –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: 0.001 TRX\n"
                    f"‚ö° –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç: ~15 TRX\n\n"
                    f"üí° –û–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã: –æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Tron: {e}")
            return (
                f"üî¥ **Tron (TRX)**\n\n"
                f"üì° –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: 0.001 TRX\n"
                f"‚ö° –°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç: ~15 TRX\n\n"
                f"üí° –û–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã: –æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ"
            )

    async def get_polygon_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π Polygon —á–µ—Ä–µ–∑ PolygonScan API"""
        try:
            response = requests.get(
                "https://api.polygonscan.com/api?module=gastracker&action=gasoracle",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('status') == '1' and 'result' in data:
                    safe = float(data['result']['SafeGasPrice'])
                    standard = float(data['result']['ProposeGasPrice'])
                    fast = float(data['result']['FastGasPrice'])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Ä–∞–≤–Ω—ã –Ω—É–ª—é
                    if safe == 0 and standard == 0 and fast == 0:
                        logger.warning("API Polygon –≤–µ—Ä–Ω—É–ª –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                    else:
                        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É MATIC
                        matic_price = await self.get_token_price("matic-network")
                        gas_limit = 21000

                        if matic_price:
                            safe_usd = (safe * gas_limit * 0.000000001) * matic_price
                            standard_usd = (standard * gas_limit * 0.000000001) * matic_price
                            fast_usd = (fast * gas_limit * 0.000000001) * matic_price

                            return (
                                f"üü™ **Polygon (MATIC)**\n\n"
                                f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: {fast} Gwei (‚âà ${fast_usd:.5f})\n"
                                f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: {standard} Gwei (‚âà ${standard_usd:.5f})\n"
                                f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {safe} Gwei (‚âà ${safe_usd:.5f})\n\n"
                                f"üí° –†–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ (21k gas)\n"
                                f"üìà –ö—É—Ä—Å MATIC: ${matic_price:.4f}"
                            )
                        else:
                            return (
                                f"üü™ **Polygon (MATIC)**\n\n"
                                f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: {fast} Gwei\n"
                                f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: {standard} Gwei\n"
                                f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {safe} Gwei\n\n"
                                f"üí° –ö–æ–º–∏—Å—Å–∏–∏ Polygon –æ–±—ã—á–Ω–æ –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ"
                            )
                else:
                    logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API Polygon: {data}")
            else:
                logger.warning(f"HTTP {response.status_code} –æ—Ç API Polygon")
                
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Polygon: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API Polygon: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –∏–ª–∏ –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
        matic_price = await self.get_token_price("matic-network")
        
        if matic_price:
            # –¢–∏–ø–∏—á–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ Polygon –≤ Gwei
            safe_gwei = 30
            standard_gwei = 50
            fast_gwei = 80
            gas_limit = 21000
            
            safe_usd = (safe_gwei * gas_limit * 0.000000001) * matic_price
            standard_usd = (standard_gwei * gas_limit * 0.000000001) * matic_price
            fast_usd = (fast_gwei * gas_limit * 0.000000001) * matic_price
            
            return (
                f"üü™ **Polygon (MATIC)**\n\n"
                f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: ~{fast_gwei} Gwei (‚âà ${fast_usd:.5f})\n"
                f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: ~{standard_gwei} Gwei (‚âà ${standard_usd:.5f})\n"
                f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: ~{safe_gwei} Gwei (‚âà ${safe_usd:.5f})\n\n"
                f"üí° –¢–∏–ø–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Polygon\n"
                f"üìà –ö—É—Ä—Å MATIC: ${matic_price:.4f}\n"
                f"üîÑ –î–∞–Ω–Ω—ã–µ API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            )
        else:
            return (
                f"üü™ **Polygon (MATIC)**\n\n"
                f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: ~80 Gwei\n"
                f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: ~50 Gwei\n"
                f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: ~30 Gwei\n\n"
                f"üí° –¢–∏–ø–∏—á–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ –Ω–∞–º–Ω–æ–≥–æ –¥–µ—à–µ–≤–ª–µ Ethereum\n"
                f"üîÑ –î–∞–Ω–Ω—ã–µ API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            )

    async def get_arbitrum_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π Arbitrum —á–µ—Ä–µ–∑ Arbiscan API"""
        try:
            response = requests.get(
                "https://api.arbiscan.io/api?module=gastracker&action=gasoracle",
                timeout=10
            )

            if response.status_code == 200:
                data = response.json()

                if data.get('status') == '1' and 'result' in data:
                    safe = int(data['result']['SafeGasPrice'])
                    standard = int(data['result']['ProposeGasPrice'])
                    fast = int(data['result']['FastGasPrice'])

                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É ETH
                    eth_price = await self.get_token_price("ethereum")

                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ~21000 gas
                    gas_limit = 21000

                    if eth_price:
                        safe_usd = (safe * gas_limit * 0.000000001) * eth_price
                        standard_usd = (standard * gas_limit * 0.000000001) * eth_price
                        fast_usd = (fast * gas_limit * 0.000000001) * eth_price

                        return (
                            f"üî∑ **Arbitrum (ETH)**\n\n"
                            f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: {fast} Gwei (‚âà ${fast_usd:.5f})\n"
                            f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: {standard} Gwei (‚âà ${standard_usd:.5f})\n"
                            f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {safe} Gwei (‚âà ${safe_usd:.5f})\n\n"
                            f"üí° –†–∞—Å—á–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ (21k gas)\n"
                            f"üìà –ö—É—Ä—Å ETH: ${eth_price:.2f}"
                        )
                    else:
                        return (
                            f"üî∑ **Arbitrum (ETH)**\n\n"
                            f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: {fast} Gwei\n"
                            f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: {standard} Gwei\n"
                            f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {safe} Gwei\n\n"
                            f"üí° L2 —Ä–µ—à–µ–Ω–∏–µ —Å –Ω–∏–∑–∫–∏–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏"
                        )
                else:
                    logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API Arbitrum: {data}")
            else:
                logger.warning(f"HTTP {response.status_code} –æ—Ç API Arbitrum")

        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Arbitrum: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API Arbitrum: {e}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
        eth_price = await self.get_token_price("ethereum")

        if eth_price:
            # –¢–∏–ø–∏—á–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ Arbitrum
            low_gwei = 0.1
            high_gwei = 2.0
            gas_limit = 21000

            low_usd = (low_gwei * gas_limit * 0.000000001) * eth_price
            high_usd = (high_gwei * gas_limit * 0.000000001) * eth_price

            return (
                f"üî∑ **Arbitrum (ETH)**\n\n"
                f"üí∞ –¢–∏–ø–∏—á–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: 0.1-2 Gwei (‚âà ${low_usd:.5f}-${high_usd:.4f})\n"
                f"üìä –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è L2\n"
                f"‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (~1-2 —Å–µ–∫)\n\n"
                f"üìà –ö—É—Ä—Å ETH: ${eth_price:.2f}\n"
                f"üí° Layer 2 —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è Ethereum\n"
                f"üîÑ –î–∞–Ω–Ω—ã–µ API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            )
        else:
            return (
                f"üî∑ **Arbitrum (ETH)**\n\n"
                f"üí∞ –¢–∏–ø–∏—á–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: 0.1-2 Gwei\n"
                f"üìä –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è L2\n"
                f"‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (~1-2 —Å–µ–∫)\n\n"
                f"üí° Layer 2 —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è Ethereum\n"
                f"üîÑ –î–∞–Ω–Ω—ã–µ API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling(drop_pending_updates=True)

def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep_alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=keep_alive, daemon=True).start()

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = BlockchainFeesBot()
    bot.run()

if __name__ == "__main__":
    main()