
import asyncio
import logging
import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv
import threading
from keep_alive import keep_alive

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BlockchainFeesBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.application = Application.builder().token(self.bot_token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–ª–±—ç–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [
                InlineKeyboardButton("üü£ TON", callback_data="ton"),
                InlineKeyboardButton("üü† Bitcoin", callback_data="bitcoin")
            ],
            [
                InlineKeyboardButton("üîµ Ethereum", callback_data="ethereum"),
                InlineKeyboardButton("üü° BSC", callback_data="bsc")
            ],
            [
                InlineKeyboardButton("üü¢ Solana", callback_data="solana"),
                InlineKeyboardButton("üî¥ Tron", callback_data="tron")
            ],
            [
                InlineKeyboardButton("üü™ Polygon", callback_data="polygon"),
                InlineKeyboardButton("üî∑ Arbitrum", callback_data="arbitrum")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–∏—Å—Å–∏–π –±–ª–æ–∫—á–µ–π–Ω–æ–≤!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫—á–µ–π–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–∏—Å—Å–∏–π:"
        )
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        blockchain = query.data
        
        try:
            fees_info = await self.get_blockchain_fees(blockchain)
            await query.edit_message_text(text=fees_info)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {blockchain}: {e}")
            await query.edit_message_text(
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {blockchain.upper()}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def get_blockchain_fees(self, blockchain: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫—á–µ–π–Ω–∞"""
        try:
            if blockchain == "ethereum":
                return await self.get_ethereum_fees()
            elif blockchain == "bsc":
                return await self.get_bsc_fees()
            elif blockchain == "bitcoin":
                return await self.get_bitcoin_fees()
            elif blockchain == "solana":
                return await self.get_solana_fees()
            elif blockchain == "ton":
                return await self.get_ton_fees()
            elif blockchain == "tron":
                return await self.get_tron_fees()
            elif blockchain == "polygon":
                return await self.get_polygon_fees()
            elif blockchain == "arbitrum":
                return await self.get_arbitrum_fees()
            else:
                return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {blockchain}: {e}")
            raise
    
    async def get_ethereum_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π Ethereum —á–µ—Ä–µ–∑ Etherscan API"""
        try:
            response = requests.get(
                "https://api.etherscan.io/api?module=gastracker&action=gasoracle",
                timeout=10
            )
            data = response.json()
            
            if data['status'] == '1':
                safe = data['result']['SafeGasPrice']
                standard = data['result']['ProposeGasPrice']
                fast = data['result']['FastGasPrice']
                
                return (
                    f"üîµ **Ethereum (ETH)**\n\n"
                    f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: {fast} Gwei\n"
                    f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: {standard} Gwei\n"
                    f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {safe} Gwei\n\n"
                    f"üí° 1 Gwei = 0.000000001 ETH"
                )
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Ethereum"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API Ethereum: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Ethereum"
    
    async def get_bsc_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π BSC —á–µ—Ä–µ–∑ BscScan API"""
        try:
            response = requests.get(
                "https://api.bscscan.com/api?module=gastracker&action=gasoracle",
                timeout=10
            )
            data = response.json()
            
            if data['status'] == '1':
                safe = data['result']['SafeGasPrice']
                standard = data['result']['ProposeGasPrice']
                fast = data['result']['FastGasPrice']
                
                return (
                    f"üü° **BSC (BNB)**\n\n"
                    f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: {fast} Gwei\n"
                    f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: {standard} Gwei\n"
                    f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {safe} Gwei\n\n"
                    f"üí° –û–±—ã—á–Ω–æ 5-10 Gwei –¥–ª—è BSC"
                )
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ BSC"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API BSC: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö BSC"
    
    async def get_bitcoin_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π Bitcoin —á–µ—Ä–µ–∑ Mempool.space API"""
        try:
            response = requests.get(
                "https://mempool.space/api/v1/fees/recommended",
                timeout=10
            )
            data = response.json()
            
            fast = data['fastestFee']
            half_hour = data['halfHourFee']
            hour = data['hourFee']
            
            return (
                f"üü† **Bitcoin (BTC)**\n\n"
                f"‚ö° –ë—ã—Å—Ç—Ä–∞—è (~10 –º–∏–Ω): {fast} sat/vB\n"
                f"üìä –°—Ä–µ–¥–Ω—è—è (~30 –º–∏–Ω): {half_hour} sat/vB\n"
                f"üêå –ú–µ–¥–ª–µ–Ω–Ω–∞—è (~60 –º–∏–Ω): {hour} sat/vB\n\n"
                f"üí° sat/vB = —Å–∞—Ç–æ—à–∏ –∑–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–π—Ç"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API Bitcoin: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Bitcoin"
    
    async def get_solana_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö Solana"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å SOL —á–µ—Ä–µ–∑ CoinGecko
            response = requests.get(
                "https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd",
                timeout=10
            )
            data = response.json()
            sol_price = data['solana']['usd']
            
            fee_sol = 0.000005
            fee_usd = fee_sol * sol_price
            
            return (
                f"üü¢ **Solana (SOL)**\n\n"
                f"üí∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: {fee_sol:.6f} SOL\n"
                f"üíµ –í –¥–æ–ª–ª–∞—Ä–∞—Ö: ${fee_usd:.6f} USD\n"
                f"üìà –ö—É—Ä—Å SOL: ${sol_price:.2f}\n\n"
                f"üí° –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Solana: {e}")
            return (
                f"üü¢ **Solana (SOL)**\n\n"
                f"üí∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: 0.000005 SOL\n\n"
                f"üí° –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
            )
    
    async def get_ton_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π TON —á–µ—Ä–µ–∑ Tonapi"""
        try:
            response = requests.get(
                "https://tonapi.io/v2/blockchain/masterchain",
                timeout=10
            )
            data = response.json()
            
            # TON –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
            return (
                f"üü£ **TON**\n\n"
                f"üí∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: ~0.01 TON\n"
                f"üìä –ö–æ–º–∏—Å—Å–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
                f"‚ö° –û–±—ã—á–Ω–æ: 0.005-0.02 TON\n\n"
                f"üí° –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ —Å—á–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API TON: {e}")
            return (
                f"üü£ **TON**\n\n"
                f"üí∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: ~0.01 TON\n"
                f"üìä –ö–æ–º–∏—Å—Å–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
                f"üí° –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ —Å—á–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
            )
    
    async def get_tron_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏—è—Ö Tron"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å TRX
            response = requests.get(
                "https://apilist.tronscan.org/api/token_price?token=trx",
                timeout=10
            )
            data = response.json()
            trx_price = float(data['priceInUsd'])
            
            bandwidth_fee = 0.001
            energy_fee = 15
            
            return (
                f"üî¥ **Tron (TRX)**\n\n"
                f"üì° Bandwidth: {bandwidth_fee} TRX\n"
                f"‚ö° Energy: ~{energy_fee} TRX (–¥–ª—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤)\n"
                f"üíµ –ö—É—Ä—Å TRX: ${trx_price:.4f}\n\n"
                f"üí° –û–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã: –æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ (~$0.0001)"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Tron: {e}")
            return (
                f"üî¥ **Tron (TRX)**\n\n"
                f"üì° Bandwidth: 0.001 TRX\n"
                f"‚ö° Energy: ~15 TRX (–¥–ª—è —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤)\n\n"
                f"üí° –û–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã: –æ—á–µ–Ω—å –¥–µ—à–µ–≤–æ"
            )
    
    async def get_polygon_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π Polygon —á–µ—Ä–µ–∑ PolygonScan API"""
        try:
            response = requests.get(
                "https://api.polygonscan.com/api?module=gastracker&action=gasoracle",
                timeout=10
            )
            data = response.json()
            
            if data['status'] == '1':
                safe = data['result']['SafeGasPrice']
                standard = data['result']['ProposeGasPrice']
                fast = data['result']['FastGasPrice']
                
                return (
                    f"üü™ **Polygon (MATIC)**\n\n"
                    f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: {fast} Gwei\n"
                    f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: {standard} Gwei\n"
                    f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {safe} Gwei\n\n"
                    f"üí° –û–±—ã—á–Ω–æ 30-150 Gwei –¥–ª—è Polygon"
                )
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Polygon"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API Polygon: {e}")
            return (
                f"üü™ **Polygon (MATIC)**\n\n"
                f"üí∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: ~50-100 Gwei\n"
                f"üìä –ö–æ–º–∏—Å—Å–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ç–∏\n\n"
                f"üí° –ù–∞–º–Ω–æ–≥–æ –¥–µ—à–µ–≤–ª–µ Ethereum"
            )
    
    async def get_arbitrum_fees(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π Arbitrum —á–µ—Ä–µ–∑ Arbiscan API"""
        try:
            response = requests.get(
                "https://api.arbiscan.io/api?module=gastracker&action=gasoracle",
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('status') == '1' and 'result' in data:
                    safe = data['result']['SafeGasPrice']
                    standard = data['result']['ProposeGasPrice']
                    fast = data['result']['FastGasPrice']
                    
                    return (
                        f"üî∑ **Arbitrum (ETH)**\n\n"
                        f"‚ö° –ë—ã—Å—Ç—Ä–∞—è: {fast} Gwei\n"
                        f"üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è: {standard} Gwei\n"
                        f"üêå –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è: {safe} Gwei\n\n"
                        f"üí° L2 —Ä–µ—à–µ–Ω–∏–µ —Å –Ω–∏–∑–∫–∏–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏"
                    )
                else:
                    logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç API Arbitrum: {data}")
            else:
                logger.warning(f"HTTP {response.status_code} –æ—Ç API Arbitrum")
                
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Arbitrum: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API Arbitrum: {e}")
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
        return (
            f"üî∑ **Arbitrum (ETH)**\n\n"
            f"üí∞ –¢–∏–ø–∏—á–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: 0.1-2 Gwei\n"
            f"üìä –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è L2\n"
            f"‚ö° –ë—ã—Å—Ç—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (~1-2 —Å–µ–∫)\n\n"
            f"üí° Layer 2 —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è Ethereum\n"
            f"üîÑ –î–∞–Ω–Ω—ã–µ API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling(drop_pending_updates=True)

def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep_alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=keep_alive, daemon=True).start()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = BlockchainFeesBot()
    bot.run()

if __name__ == "__main__":
    main()
